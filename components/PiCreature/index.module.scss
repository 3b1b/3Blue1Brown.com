.pi_creature {
  &[data-text="false"] {
    --creature-size: 150px;

    &[data-design="small"] {
      --creature-size: 100px;
    }

    &[data-design="big"] {
      --creature-size: 200px;
    }
  }

  &[data-text="true"] {
    --creature-size: 150px;

    &[data-design="small"] {
      --creature-size: 100px;
    }

    &[data-design="big"] {
      --creature-size: 200px;
    }
  }

  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 10px;
  max-width: 100%;
  margin: 0 auto;
  text-align: center;
  position: relative;
}

/* Creature styling - clean and simple */
.creature {
  width: var(--creature-size);
  height: var(--creature-size);
  
  img {
    width: 100%;
    height: 100%;
    object-fit: contain;
  }
}

/* Flip creature image when needed */
.pi_creature[data-flip="true"] .creature img {
  transform: scaleX(-1);
}

.pi_creature[data-design="small"] {
  display: inline-block;
  vertical-align: middle;
}

/* Speech bubble styling - CSS-based rounded rectangle */
.speech_bubble {
  display: flex;
  justify-content: center;
  align-items: center;
  border-radius: 12px;
  padding: 8px 12px;
  position: relative;
  max-width: 175px;
  
  p {
    margin: 0;
    line-height: 1.3;
    text-align: center;
  }
  
  // Create speech bubble tail with CSS
  &::after {
    content: '';
    position: absolute;
    bottom: -18px;
    transform: translateX(-50%);
    width: 0;
    height: 0;
    border-left: 18px solid transparent;
    border-right: 18px solid transparent;
  }
  
  // Create inner triangle for the tail
  &::before {
    content: '';
    position: absolute;
    bottom: -14px;
    transform: translateX(-50%);
    width: 0;
    height: 0;
    border-left: 16px solid transparent;
    border-right: 16px solid transparent;
    z-index: 1;
  }
}

/* Light mode speech bubble */
.pi_creature[data-dark="false"] .speech_bubble,
.pi_creature:not([data-dark]) .speech_bubble {
  background: white;
  color: black;
  border: 2px solid black;
  
  &::after {
    border-top: 18px solid black;
  }
  
  &::before {
    border-top: 16px solid white;
  }
}

/* Dark mode speech bubble */
.pi_creature[data-dark="true"] .speech_bubble {
  background: black;
  color: white;
  border: 2px solid white;
  
  &::after {
    border-top: 18px solid white;
  }
  
  &::before {
    border-top: 16px solid black;
  }
}

/* Speech bubble with slight offset toward creature */
.pi_creature[data-flip="false"] .speech_bubble {
  /* Offset slightly left (toward creature on right) */
  margin-left: 120px;
  
  &::after {
    left: 25%;
    border-left: 12px solid transparent;
    border-right: 24px solid transparent;
  }
  
  &::before {
    left: 25%;
    border-left: 10px solid transparent;
    border-right: 22px solid transparent;
  }
}

.pi_creature[data-flip="true"] .speech_bubble {
  /* Offset slightly right (toward creature on left) */
  margin-right: 120px;
  
  &::after {
    left: 75%;
    border-left: 24px solid transparent;
    border-right: 12px solid transparent;
  }
  
  &::before {
    left: 75%;
    border-left: 22px solid transparent;
    border-right: 10px solid transparent;
  }
}

/* Thought bubble styling - SVG-based */
.thought_bubble {
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
  
  svg {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
}

.thought_text {
  position: relative;
  z-index: 1;
  padding: 8px 12px;
  text-align: center;
  
  p {
    margin: 0;
    line-height: 1.3;
  }
}

/* Positioning logic for different placements */
@mixin pi-position($sectionWidth) {
  $cutoffWidth: $sectionWidth + 600px;

  &[data-placement="side"] {
    position: absolute;

    @media (max-width: $cutoffWidth) {
      display: none;
    }

    transform: translateY(-50%);
  }

  &[data-placement="auto"] {
    position: static;

    @media (min-width: $cutoffWidth) {
      position: absolute;

      transform: translateY(-50%);
    }
  }

  &[data-placement="inline"] {
    position: static;
  }
}

.pi_creature[data-sectionwidth="normal"] {
  @include pi-position($page);
}

.pi_creature[data-sectionwidth="narrow"] {
  @include pi-position($page-narrow);
}

/* Position creature when flipped */
.pi_creature[data-flip="true"] {
  left: calc(-1 * var(--creature-size) - 20px);
}

.pi_creature[data-flip="false"] {
  right: calc(-1 * var(--creature-size) - 20px);
}
